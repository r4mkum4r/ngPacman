// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

angular.module('pacman.services').service('BallModel', function() {
  var BallModel;
  return BallModel = (function() {
    var defaults;

    defaults = {
      pos: {
        x: 100,
        y: 100
      },
      radius: 10,
      speed: {
        x: 3,
        y: 4
      }
    };

    function BallModel(options) {
      this.draw = __bind(this.draw, this);
      this.update = __bind(this.update, this);
      this.getY = __bind(this.getY, this);
      this.setY = __bind(this.setY, this);
      this.getX = __bind(this.getX, this);
      this.setX = __bind(this.setX, this);
      this.options = angular.extend({}, defaults, options);
    }

    BallModel.prototype.setX = function(newX) {
      return this.options.pos.x = newX;
    };

    BallModel.prototype.getX = function() {
      return this.options.pos.x;
    };

    BallModel.prototype.setY = function(newY) {
      return this.options.pos.y = newY;
    };

    BallModel.prototype.getY = function() {
      return this.options.pos.y;
    };

    BallModel.prototype.update = function() {
      if (this.options.pos.x + (this.options.radius * 2) > 1090 || this.options.pos.x - this.options.radius < 0) {
        this.options.speed.x *= -1;
      }
      if (this.options.pos.y + (this.options.radius * 2) > 400 || this.options.pos.y - this.options.radius < 0) {
        this.options.speed.y *= -1;
      }
      this.options.pos.x += this.options.speed.x;
      return this.options.pos.y += this.options.speed.y;
    };

    BallModel.prototype.draw = function(canvas) {
      var grd;
      grd = canvas.createRadialGradient(75, 50, 5, 90, 60, 100);
      grd.addColorStop(0, "black");
      grd.addColorStop(.45, "red");
      grd.addColorStop(1, "black");
      canvas.beginPath();
      canvas.arc(this.options.pos.x, this.options.pos.y, this.options.radius, 0, Math.PI * 2);
      canvas.closePath();
      canvas.fillStyle = grd;
      return canvas.fill();
    };

    return BallModel;

  })();
});
