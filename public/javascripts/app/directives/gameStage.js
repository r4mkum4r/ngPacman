// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

angular.module('pacman.directives').directive('gameStage', [
  'canvasService', '$compile', 'PlayerModel', '$timeout', function(canvasService, $compile, PlayerModel, $timeout) {
    return {
      controller: [
        '$scope', '$timeout', '$interval', function($scope, $timeout, $interval) {
          var gameStage;
          gameStage = (function() {
            function gameStage() {
              this.setupControls = __bind(this.setupControls, this);
              this.drawBall = __bind(this.drawBall, this);
              this.updatePlayers = __bind(this.updatePlayers, this);
              this.update = __bind(this.update, this);
              this.createPlayer = __bind(this.createPlayer, this);
              this.drawGameElements = __bind(this.drawGameElements, this);
              this.clearStage = __bind(this.clearStage, this);
              this.startGame = __bind(this.startGame, this);
              this.init = __bind(this.init, this);
            }

            gameStage.prototype.init = function(stageWidth, stageHeight) {
              this.gameConfig = {
                speedX: 2,
                speedY: 2
              };
              this.stage = {};
              this.ball = {
                radius: 10,
                posX: 500,
                posY: 100,
                speedX: 2,
                speedY: 2
              };
              this.userControl = {
                isDown: false,
                isTop: false
              };
              this.stage.height = stageHeight;
              this.stage.width = stageWidth;
              $scope.$canvas = $($scope.canvas);
              $scope.isLocalPlayerJoined = false;
              $scope.localPlayer = false;
              $scope.players = [];
              return '';
            };

            gameStage.prototype.startGame = function() {
              return this.update();
            };

            gameStage.prototype.clearStage = function() {
              return $scope.canvas.clearRect(0, 0, this.stage.width, this.stage.height);
            };

            gameStage.prototype.drawGameElements = function() {
              this.drawPlayers();
              if (this.player.posX < this.ball.posX + this.ball.radius && this.player.posX + this.player.width > this.ball.posX && this.player.posY < this.ball.posY + this.ball.radius && this.player.posY + this.player.height > this.ball.posY) {
                this.ball.speedX *= -1;
                return $timeout((function(_this) {
                  return function() {
                    _this.ball.speedX += 3;
                    return _this.player.speedX += 1;
                  };
                })(this), 50);
              }
            };

            gameStage.prototype.createPlayer = function(player, startX, startY) {
              var newPlayer;
              newPlayer = new PlayerModel(player, startX, startY);
              this.clearStage();
              $timeout(function() {
                newPlayer.draw($scope.canvas);
                if ($scope.localPlayer) {
                  return $scope.localPlayer.draw($scope.canvas);
                }
              }, 30);
              if ($scope.isLocalPlayerJoined === true) {
                $scope.players.push(newPlayer);
              } else {
                $scope.localPlayer = newPlayer;
                $scope.isLocalPlayerJoined = true;
              }
              return this.setupControls();
            };

            gameStage.prototype.update = function() {
              this.updatePlayers();
              this.updateBall();
              return window.requestAnimFrame(this.update);
            };

            gameStage.prototype.updatePlayers = function() {
              this.clearStage();
              $scope.localPlayer.draw($scope.canvas);
              return $scope.players.forEach(function(player) {
                return player.draw($scope.canvas);
              });
            };

            gameStage.prototype.updateBall = function() {
              if (this.ball.posX + (this.ball.radius * 2) > this.stage.width || this.ball.posX - this.ball.radius < 0) {
                this.ball.speedX *= -1;
              }
              if (this.ball.posY + (this.ball.radius * 2) > this.stage.height || this.ball.posY - this.ball.radius < 0) {
                this.ball.speedY *= -1;
              }
              this.ball.posX += this.ball.speedX;
              return this.ball.posY += this.ball.speedY;
            };

            gameStage.prototype.drawBall = function() {
              $scope.canvas.beginPath();
              $scope.canvas.arc(this.ball.posX, this.ball.posY, this.ball.radius, 0, Math.PI * 2, true);
              $scope.canvas.closePath();
              return $scope.canvas.fill();
            };

            gameStage.prototype.setupControls = function() {
              return $(document).on('keydown', (function(_this) {
                return function(e) {
                  if (e.keyCode === 38 || e.keyCode === 40) {
                    return $scope.localPlayer.update(e.keyCode);
                  }
                };
              })(this));
            };

            return gameStage;

          })();
          return new gameStage;
        }
      ],
      link: function(scope, elem, attrs, ctrl) {
        scope.stage = elem[0];
        scope.canvas = scope.stage.getContext('2d');
        ctrl.init($(elem).width(), $(elem).height());
        canvasService.socket.on('createPlayer', function(player) {
          if (player.type === 1) {
            return ctrl.createPlayer(player, 0, 0);
          } else if (player.type === 2) {
            return ctrl.createPlayer(player, 1090, 0);
          }
        });
        return canvasService.socket.on('startGame', function(players) {});
      }
    };
  }
]);
